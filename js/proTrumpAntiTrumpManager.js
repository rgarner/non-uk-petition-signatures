// Generated by CoffeeScript 1.9.3
(function() {
  var DuellingPetitions, ProAntiTrumpView,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DuellingPetitions = (function() {
    var get, percentage;

    function DuellingPetitions(url1, url2) {
      this.url1 = url1;
      this.url2 = url2;
      this.byCountry = bind(this.byCountry, this);
      this.byConstituency = bind(this.byConstituency, this);
      this.stats = bind(this.stats, this);
      this.totalSignatures = bind(this.totalSignatures, this);
      this.getBoth = bind(this.getBoth, this);
    }

    get = function(url) {
      return $.ajax({
        url: url.toString(),
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log("Couldn't get petition JSON - " + textStatus + ": " + errorThrown);
        },
        success: (function(_this) {
          return function(petitionJson) {
            return console.log("got " + url + " JSON:", petitionJson);
          };
        })(this)
      });
    };

    DuellingPetitions.prototype.getBoth = function(callback) {
      return $.when(get(this.url1), get(this.url2)).done((function(_this) {
        return function(a1, a2) {
          _this.petition1 = new PetitionData(a1[0]);
          _this.petition2 = new PetitionData(a2[0]);
          return callback();
        };
      })(this));
    };

    DuellingPetitions.prototype.totalSignatures = function() {
      return this.petition1.stats().total + this.petition2.stats().total;
    };

    DuellingPetitions.prototype.stats = function() {
      var stats, total;
      stats = [this.petition1.stats(), this.petition2.stats()];
      total = stats[0].total + stats[1].total;
      return {
        total: total,
        petitions: [
          {
            title: this.petition1.title(),
            total: stats[0].total,
            percentage: (stats[0].total / total) * 100
          }, {
            title: this.petition2.title(),
            total: stats[1].total,
            percentage: (stats[1].total / total) * 100
          }
        ]
      };
    };

    percentage = function(c1, c2) {
      var total;
      total = c1.signature_count + c2.signature_count;
      return (c1.signature_count / total) * 100;
    };

    DuellingPetitions.prototype.byConstituency = function() {
      return this.petition1.signaturesByConstituency().map((function(_this) {
        return function(constituency) {
          var constituency2, mappedConstituency;
          constituency2 = _this.petition2.signaturesByConstituency().find(function(c) {
            return c.ons_code === constituency.ons_code;
          });
          mappedConstituency = {
            name: constituency.name,
            mp: constituency.mp,
            ons_code: constituency.ons_code,
            petitions: [
              {
                title: _this.petition1.title(),
                signature_count: constituency.signature_count,
                percentage: percentage(constituency, constituency2)
              }, {
                title: _this.petition2.title(),
                signature_count: constituency2.signature_count,
                percentage: percentage(constituency2, constituency)
              }
            ]
          };
          return mappedConstituency;
        };
      })(this));
    };

    DuellingPetitions.prototype.byCountry = function() {
      return this.petition1.signaturesByCountry().map((function(_this) {
        return function(country) {
          var country2, mappedCountry;
          country2 = _this.petition2.signaturesByCountry().find(function(c) {
            return c.code === country.code;
          }) || {
            name: country.name,
            code: country.code,
            signature_count: 0
          };
          mappedCountry = {
            name: country.name,
            code: country.code,
            petitions: [
              {
                title: _this.petition1.title(),
                signature_count: country.signature_count,
                percentage: percentage(country, country2)
              }, {
                title: _this.petition2.title(),
                signature_count: country2.signature_count,
                percentage: percentage(country2, country)
              }
            ]
          };
          return mappedCountry;
        };
      })(this));
    };

    return DuellingPetitions;

  })();

  ProAntiTrumpView = (function() {
    var createTooltip, drawBubbles, drawTable, setupSummaryProgressBar, setupTitle;

    function ProAntiTrumpView(duellingPetitions1) {
      this.duellingPetitions = duellingPetitions1;
      this.draw = bind(this.draw, this);
    }

    drawTable = function(tableBody, ukOrNonUk) {
      var area, i, len, results, sortedByTotalSignatures, source;
      tableBody.find('tr').remove();
      source = ukOrNonUk === 'uk' ? this.duellingPetitions.byConstituency : this.duellingPetitions.byCountry;
      sortedByTotalSignatures = source().sort(function(c1, c2) {
        var signature_counts;
        signature_counts = [c1, c2].map(function(area) {
          return area.petitions[0].signature_count + area.petitions[1].signature_count;
        });
        if (signature_counts[0] < signature_counts[1]) {
          return 1;
        } else {
          return -1;
        }
      });
      results = [];
      for (i = 0, len = sortedByTotalSignatures.length; i < len; i++) {
        area = sortedByTotalSignatures[i];
        results.push(tableBody.append("<tr>\n  <td class='title'>" + area.name + "</td>\n  <td class='bar'>\n    <div class=\"progress-bar\" style='width: " + area.petitions[0].percentage + "%'>\n        <span>" + (area.petitions[0].signature_count.toLocaleString('en-GB')) + " â€“ " + (area.petitions[0].percentage.toFixed(1)) + "%</span>\n    </div>\n    <div class=\"progress-bar progress-bar-warning\" role=\"progressbar\" style='width: " + area.petitions[1].percentage + "%'>\n        <span>" + (area.petitions[1].percentage.toFixed(1)) + "%</span>\n    </div>\n  </td>\n</tr>"));
      }
      return results;
    };

    setupTitle = function() {
      return $('.subtitle .n').text(this.duellingPetitions.totalSignatures().toLocaleString('en-GB', {
        minimumFractionDigits: 0
      }));
    };

    setupSummaryProgressBar = function() {
      var stats;
      stats = this.duellingPetitions.stats();
      $('.progress-bar-anti-trump').attr('style', "width: " + (stats.petitions[0].percentage.toFixed(1)) + "%");
      $('.progress-bar-anti-trump span').text((stats.petitions[0].total.toLocaleString('en-GB', {
        minimumFractionDigits: 0
      })) + " (" + (stats.petitions[0].percentage.toFixed(1)) + "%) are anti-Trump.");
      $('.progress-bar-pro-trump').attr('style', "width: " + (stats.petitions[1].percentage.toFixed(1)) + "%");
      return $('.progress-bar-pro-trump span').text((stats.petitions[1].total.toLocaleString('en-GB', {
        minimumFractionDigits: 0
      })) + " (" + (stats.petitions[1].percentage.toFixed(1)) + "%) pro.");
    };

    createTooltip = function(vis, svg) {
      var tip;
      tip = d3.tip(vis).attr('class', 'd3-tip').offset([-10, 0]).html(function(d) {
        var formattedPercentages;
        formattedPercentages = [d.percentage.toFixed(1), (100 - d.percentage).toFixed(1)];
        return "<h4>" + d.name + "</h4>\n<p><span class='value'>" + (d.size.toLocaleString('en-GB')) + "</span> signatures, of which</p>\n<div class=\"progress\">\n    <div class=\"progress-bar progress-bar-anti-trump\" style=\"width: " + formattedPercentages[0] + "%\">\n        <span>" + formattedPercentages[0] + "% are anti-Trump</span>\n    </div>\n    <div class=\"progress-bar progress-bar-warning progress-bar-pro-trump\" role=\"progressbar\"\n         style=\"width:" + formattedPercentages[1] + "%\"\n    >\n        <span>" + formattedPercentages[1] + "% pro</span>\n    </div>\n</div>";
      });
      svg.call(tip);
      return tip;
    };

    drawBubbles = function(ukOrNonUk) {
      var arc, bubble, color, convertProTrumpPercentageToRadians, data, diameter, graph, group, margin, nodes, processData, size, source, svg, textVisibilityThreshold, tip, vis;
      source = ukOrNonUk === 'uk' ? this.duellingPetitions.byConstituency : this.duellingPetitions.byCountry;
      processData = function(source) {
        var children, sigMax, sigMin;
        sigMax = 0;
        sigMin = 9999999999;
        children = source().map(function(area) {
          var totalSignatures;
          totalSignatures = area.petitions[0].signature_count + area.petitions[1].signature_count;
          if (totalSignatures < sigMin) {
            sigMin = totalSignatures;
          }
          if (totalSignatures > sigMax) {
            sigMax = totalSignatures;
          }
          return {
            name: area.name,
            className: area.ons_code || area.code,
            code: area.code,
            percentage: area.petitions[0].percentage,
            size: area.petitions[0].signature_count + area.petitions[1].signature_count
          };
        });
        return {
          sigMin: sigMin,
          sigMax: sigMax,
          children: children
        };
      };
      margin = {
        top: 40,
        right: 20,
        bottom: 40,
        left: 20
      };
      diameter = window.innerWidth - margin.left - margin.right;
      graph = d3.select('#graph');
      graph.select('svg').remove();
      svg = graph.append('svg').attr('width', diameter).attr('height', diameter);
      bubble = d3.layout.pack().size([diameter, diameter]).sort(function(a, b) {
        if (a.size > b.size) {
          return -1;
        } else {
          return 1;
        }
      }).value(function(d) {
        return d.size;
      }).padding(2);
      data = processData(source);
      nodes = bubble.nodes(data).filter(function(d) {
        return !d.children;
      });
      color = d3.scale.linear().domain([0, 100]).range(['#f0ad4e', '#337ab7']);
      size = d3.scale.linear().domain([data.sigMin, data.sigMax]).range([0, 20]);
      vis = svg.selectAll('circle').data(nodes);
      tip = createTooltip(vis, svg);
      group = vis.enter().append('g').attr('class', 'area-group').on('mouseover', tip.show).on('mouseout', tip.hide);
      textVisibilityThreshold = ukOrNonUk === 'uk' ? 7000 : 300;
      group.append('circle').attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      }).attr('r', function(d) {
        return d.r;
      }).attr('class', function(d) {
        return d.className;
      }).attr('style', function(d) {
        return "fill: " + (color(d.percentage));
      });
      group.append('circle').attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      }).attr('r', function(d) {
        return d.r * ((100 - d.percentage) / 100);
      }).attr('class', function(d) {
        return d.className;
      }).attr('disabled', 'disabled').attr('style', "fill: #f0ad4e");
      convertProTrumpPercentageToRadians = function(d) {
        return (100 - d.percentage) / 100 * 360 * Math.PI / 180;
      };
      arc = d3.svg.arc().innerRadius(function(d) {
        return d.r * 0.85;
      }).outerRadius(function(d) {
        return d.r;
      }).startAngle(convertProTrumpPercentageToRadians).endAngle(0 * (Math.PI / 180));
      vis.append("path").attr("class", "pro").attr("d", arc).attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
      group.append('text').attr('transform', function(d) {
        return "translate(" + d.x + "," + (d.y - size(d.size)) + ")";
      }).text(function(d) {
        if (d.size > textVisibilityThreshold) {
          return d.name;
        }
      }).append('svg:tspan').attr('x', 0).attr('dy', 20).text(function(d) {
        if (d.size > textVisibilityThreshold) {
          return d.size.toLocaleString('en-GB');
        }
      });
      return group.append('circle').attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      }).attr('r', function(d) {
        return d.r;
      }).attr('class', 'click-capture').style('visibility', 'hidden');
    };

    ProAntiTrumpView.prototype.draw = function(tableBody, ukOrNonUk) {
      setupTitle.call(this);
      setupSummaryProgressBar.call(this);
      return drawBubbles.call(this, ukOrNonUk);
    };

    return ProAntiTrumpView;

  })();

  this.ProTrumpAntiTrumpManager = (function() {
    var oppositeUkOrNonUk;

    function ProTrumpAntiTrumpManager() {
      this.makeDropdownReflectUkOrNonUk = bind(this.makeDropdownReflectUkOrNonUk, this);
      this.setupUkNonUkLinks = bind(this.setupUkNonUkLinks, this);
    }

    oppositeUkOrNonUk = function(ukOrNonUk) {
      if (ukOrNonUk === 'uk') {
        return 'non-uk';
      } else {
        return 'uk';
      }
    };

    ProTrumpAntiTrumpManager.prototype.ukNonUk = function() {
      return $('.uk-non-uk li.disabled a').text().toLowerCase();
    };

    ProTrumpAntiTrumpManager.prototype.setupUkNonUkLinks = function() {
      $('.menu-non-uk a').attr('href', '#/');
      return $('.menu-uk a').attr('href', "#/uk");
    };

    ProTrumpAntiTrumpManager.prototype.makeDropdownReflectUkOrNonUk = function(active) {
      var activeText;
      activeText = $("li.menu-" + active).addClass('disabled').text();
      $("li.menu-" + (oppositeUkOrNonUk(active))).removeClass('disabled');
      return $('.uk-non-uk .inline-label').text(activeText);
    };

    ProTrumpAntiTrumpManager.prototype.setup = function(ukOrNonUk) {
      var antiTrump, duellingPetitions, proTrump;
      antiTrump = 'https://petition.parliament.uk/petitions/171928.json';
      proTrump = 'https://petition.parliament.uk/petitions/178844.json';
      duellingPetitions = new DuellingPetitions(antiTrump, proTrump);
      duellingPetitions.getBoth(function() {
        var view;
        view = new ProAntiTrumpView(duellingPetitions);
        return view.draw($('#bars tbody'), ukOrNonUk);
      });
      this.setupUkNonUkLinks();
      return this.makeDropdownReflectUkOrNonUk(ukOrNonUk);
    };

    return ProTrumpAntiTrumpManager;

  })();

}).call(this);

//# sourceMappingURL=proTrumpAntiTrumpManager.js.map
