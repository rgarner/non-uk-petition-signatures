// Generated by CoffeeScript 1.9.3
(function() {
  var DuellingPetitions, ProAntiTrumpView,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DuellingPetitions = (function() {
    var get, percentage;

    function DuellingPetitions(url1, url2) {
      this.url1 = url1;
      this.url2 = url2;
      this.byCountry = bind(this.byCountry, this);
      this.byConstituency = bind(this.byConstituency, this);
      this.stats = bind(this.stats, this);
      this.totalSignatures = bind(this.totalSignatures, this);
      this.getBoth = bind(this.getBoth, this);
    }

    get = function(url) {
      return $.ajax({
        url: url.toString(),
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log("Couldn't get petition JSON - " + textStatus + ": " + errorThrown);
        },
        success: (function(_this) {
          return function(petitionJson) {
            return console.log("got " + url + " JSON:", petitionJson);
          };
        })(this)
      });
    };

    DuellingPetitions.prototype.getBoth = function(callback) {
      return $.when(get(this.url1), get(this.url2)).done((function(_this) {
        return function(a1, a2) {
          _this.petition1 = new PetitionData(a1[0]);
          _this.petition2 = new PetitionData(a2[0]);
          return callback();
        };
      })(this));
    };

    DuellingPetitions.prototype.totalSignatures = function() {
      return this.petition1.stats().total + this.petition2.stats().total;
    };

    DuellingPetitions.prototype.stats = function() {
      var stats, total;
      stats = [this.petition1.stats(), this.petition2.stats()];
      total = stats[0].total + stats[1].total;
      return {
        total: total,
        petitions: [
          {
            title: this.petition1.title(),
            total: stats[0].total,
            percentage: (stats[0].total / total) * 100
          }, {
            title: this.petition2.title(),
            total: stats[1].total,
            percentage: (stats[1].total / total) * 100
          }
        ]
      };
    };

    percentage = function(c1, c2) {
      var total;
      total = c1.signature_count + c2.signature_count;
      return (c1.signature_count / total) * 100;
    };

    DuellingPetitions.prototype.byConstituency = function() {
      return this.petition1.signaturesByConstituency().map((function(_this) {
        return function(constituency) {
          var constituency2, mappedConstituency;
          constituency2 = _this.petition2.signaturesByConstituency().find(function(c) {
            return c.ons_code === constituency.ons_code;
          });
          mappedConstituency = {
            name: constituency.name,
            mp: constituency.mp,
            ons_code: constituency.ons_code,
            petitions: [
              {
                title: _this.petition1.title(),
                signature_count: constituency.signature_count,
                percentage: percentage(constituency, constituency2)
              }, {
                title: _this.petition2.title(),
                signature_count: constituency2.signature_count,
                percentage: percentage(constituency2, constituency)
              }
            ]
          };
          return mappedConstituency;
        };
      })(this));
    };

    DuellingPetitions.prototype.byCountry = function() {
      return this.petition1.signaturesByCountry().map((function(_this) {
        return function(country) {
          var country2, mappedCountry;
          country2 = _this.petition2.signaturesByCountry().find(function(c) {
            return c.code === country.code;
          }) || {
            name: country.name,
            code: country.code,
            signature_count: 0
          };
          mappedCountry = {
            name: country.name,
            code: country.code,
            petitions: [
              {
                title: _this.petition1.title(),
                signature_count: country.signature_count,
                percentage: percentage(country, country2)
              }, {
                title: _this.petition2.title(),
                signature_count: country2.signature_count,
                percentage: percentage(country2, country)
              }
            ]
          };
          return mappedCountry;
        };
      })(this));
    };

    return DuellingPetitions;

  })();

  ProAntiTrumpView = (function() {
    var drawTable, setupSummaryProgressBar, setupTitle;

    function ProAntiTrumpView(duellingPetitions1) {
      this.duellingPetitions = duellingPetitions1;
      this.draw = bind(this.draw, this);
    }

    drawTable = function(tableBody, ukOrNonUk) {
      var area, i, len, results, sortedByDescendingPetition1Percentage, source;
      tableBody.find('tr').remove();
      source = ukOrNonUk === 'uk' ? this.duellingPetitions.byConstituency : this.duellingPetitions.byCountry;
      sortedByDescendingPetition1Percentage = source().sort(function(c1, c2) {
        if (c1.petitions[0].percentage < c2.petitions[0].percentage) {
          return 1;
        } else {
          return -1;
        }
      });
      results = [];
      for (i = 0, len = sortedByDescendingPetition1Percentage.length; i < len; i++) {
        area = sortedByDescendingPetition1Percentage[i];
        results.push(tableBody.append("<tr>\n  <td class='title'>" + area.name + "</td>\n  <td class='bar'>\n    <div class=\"progress-bar\" style='width: " + area.petitions[0].percentage + "%'>\n        <span>" + (area.petitions[0].signature_count.toLocaleString('en-GB')) + " â€“ " + (area.petitions[0].percentage.toFixed(1)) + "%</span>\n    </div>\n    <div class=\"progress-bar progress-bar-warning\" role=\"progressbar\" style='width: " + area.petitions[1].percentage + "%'>\n        <span>" + (area.petitions[1].percentage.toFixed(1)) + "%</span>\n    </div>\n  </td>\n</tr>"));
      }
      return results;
    };

    setupTitle = function() {
      return $('.subtitle .n').text(this.duellingPetitions.totalSignatures().toLocaleString('en-GB', {
        minimumFractionDigits: 0
      }));
    };

    setupSummaryProgressBar = function() {
      var stats;
      stats = this.duellingPetitions.stats();
      console.log(stats);
      $('.progress-bar-anti-trump').attr('style', "width: " + (stats.petitions[0].percentage.toFixed(1)) + "%");
      $('.progress-bar-anti-trump span').text((stats.petitions[0].total.toLocaleString('en-GB', {
        minimumFractionDigits: 0
      })) + " (" + (stats.petitions[0].percentage.toFixed(1)) + "%) are anti-Trump.");
      $('.progress-bar-pro-trump').attr('style', "width: " + (stats.petitions[1].percentage.toFixed(1)) + "%");
      return $('.progress-bar-pro-trump span').text((stats.petitions[1].total.toLocaleString('en-GB', {
        minimumFractionDigits: 0
      })) + " (" + (stats.petitions[1].percentage.toFixed(1)) + "%) pro.");
    };

    ProAntiTrumpView.prototype.draw = function(tableBody, ukOrNonUk) {
      setupTitle.call(this);
      setupSummaryProgressBar.call(this);
      return drawTable.call(this, tableBody, ukOrNonUk);
    };

    return ProAntiTrumpView;

  })();

  this.ProTrumpAntiTrumpManager = (function() {
    function ProTrumpAntiTrumpManager() {
      this.setupUkNonUkLinks = bind(this.setupUkNonUkLinks, this);
    }

    ProTrumpAntiTrumpManager.prototype.setupUkNonUkLinks = function() {
      return $('.uk-non-uk .dropdown-menu a').click((function(_this) {
        return function(e) {
          var selectedMenuItem;
          $('.uk-non-uk .dropdown-menu li').removeClass('disabled');
          selectedMenuItem = $(e.currentTarget);
          selectedMenuItem.parent('li').addClass('disabled');
          $('.uk-non-uk .inline-label').text(selectedMenuItem.text());
          return _this.setup(selectedMenuItem.text().toLowerCase());
        };
      })(this));
    };

    ProTrumpAntiTrumpManager.prototype.setup = function(ukOrNonUk) {
      var antiTrump, duellingPetitions, proTrump;
      antiTrump = 'https://petition.parliament.uk/petitions/171928.json';
      proTrump = 'https://petition.parliament.uk/petitions/178844.json';
      duellingPetitions = new DuellingPetitions(antiTrump, proTrump);
      duellingPetitions.getBoth(function() {
        var view;
        view = new ProAntiTrumpView(duellingPetitions);
        return view.draw($('#bars tbody'), ukOrNonUk);
      });
      return this.setupUkNonUkLinks();
    };

    return ProTrumpAntiTrumpManager;

  })();

}).call(this);

//# sourceMappingURL=proTrumpAntiTrumpManager.js.map
